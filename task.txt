Домашнее задание.
Напишите проект - трекер задач, англ. - issue tracker. Это расширенная версия проекта TODO-list, которая хранит больше информации о задачах, исполнителях и т.д.

Можно продолжить проект из ваших предыдущих домашек.

Трекер задач - это ПО, в котором программисты (и не только) могут записывать информацию о задачах (issue), и отслеживать кто, когда и над какими задачами работал. 



У типов и статусов есть только одно поле:

Название - строчное, обязательное.



У задачи есть следующие поля:

Краткое описание (заголовок, summary) - строчное, обязательное;

Полное описание (description) - текстовое, может быть пустым;

Статус - внешний ключ к статусу, при удалении - запрещать;

Тип - внешний ключ к типу, при удалении - запрещать;

Время создания - дата и время с автозаполнением при создании;

Время обновления - дата и время с автозаполнением при обновлении.



3 основных типа задач:

Task - задача;

Bug - ошибка;

Enhancement - улучшение.



3 основных статуса:

New - новый;

In Progress - в процессе;

Done - выполнено.



По желанию можно добавить другие типы и статусы задач.

Этап 1
Создайте модели задачи, статуса и типа.

Создайте миграцию (миграции) и примените их.

Зарегистрируйте все модели в админ-панели.

Создайте админа и добавьте через админ-панель типы и статусы задач, и 5-6 задач с разными статусами и типами.

Создайте фикстуру с данными из ваших моделей + суперадмина, поместите её в папку fixtures в корне django-проекта (source/fixtures).

Этап 2
Создайте страницы CRUD для задачи на базе классовых представлений:

Главная (список задач) - TemplateView

Просмотр одной задачи - TemplateView

Добавление задачи - TemplateView или View

Редактирование задачи - TemplateView или View

Удаление задачи - TemplateView или View



Используйте поле типа ModelChoiceField в формах для выбора типа и статуса при создании и редактировании задачи. Вместо choices передайте ему свойство queryset с выборкой данных из соответствующей модели. Например:

type = forms.ModelChoiceField(queryset=Type.objects.all())







После этого этапа и перед началом следующего обязательно должен быть коммит.

Этап 3
Поменяйте поле "Тип задачи" в задаче на связь "Многие-ко-многим".



Бонус 1 (+0.1 балла): поменяйте виджет поля ModelMultipleChoiceField на более удобный (найдите подходящий среди виджетов форм джанго).

Бонус 2 (+0.2 балла): перенесите отмеченные в задачах типы в новое поле многие-ко-многим с помощью миграции в 3 этапа (как показано в раздатке)

Общие указания
Используйте базовый шаблон. В общем меню должны быть ссылки на главную (список задач) и добавление задачи.

Используйте формы django для создания и редактирования задач.

Используйте частичные шаблоны (partial / include) для обособленных или повторяющихся блоков разметки: панели навигации, форм и полей в них, карточек задачи и т.д

Страницы должны быть стилизованы вручную или с помощью Bootstrap. За некорректный  внешний вид будут сняты баллы

Проект должен находиться под версионным контролем и в репозитории должно быть не меньше 5 осмысленных коммитов на русском.

Код должен быть отформатирован по правилам PEP8

Создайте фикстуру с тестовыми данными.

В репозитории не должно быть "лишних" файлов: виртуального окружения, базы данных и т.д.

Запомните эти инструкцию на все дальнейшие работы